{
  "enabled": true,
  "name": "Spec Workflow Formatter",
  "description": "Ensures spec documents maintain proper formatting during the requirements → design → tasks workflow",
  "version": "1",
  "when": {
    "type": "fileEdited",
    "patterns": [
      ".kiro/specs/**/requirements.md",
      ".kiro/specs/**/design.md",
      ".kiro/specs/**/tasks.md"
    ]
  },
  "then": {
    "type": "askAgent",
    "prompt": "A spec document has been modified. Please ensure it maintains proper Kiro formatting standards for the spec workflow:\n\n## Spec Document Standards:\n\n### Requirements.md:\n- Must use EARS format for acceptance criteria\n- Structure: Introduction → Requirements → User Stories → Acceptance Criteria\n- Hierarchical numbering (1.1, 1.2, etc.)\n- Clear user stories: \"As a [role], I want [feature], so that [benefit]\"\n- Specific, testable acceptance criteria using WHEN/THEN/IF format\n\n### Design.md:\n- Must include: Overview → Architecture → Components → Data Models\n- Use Mermaid diagrams for architecture visualization\n- Include technical specifications with code blocks\n- Reference requirements from requirements.md\n- Explain design decisions and rationales\n\n### Tasks.md:\n- Must use flat numbered list: `- [x]` completed, `- [-]` not started\n- Sequential numbering (1, 2, 3...) without sections\n- Each task must be actionable and specific\n- Include implementation details as sub-bullets\n- Reference requirements: `_Requirements: X.X, Y.Y_`\n- Tasks must build incrementally on previous tasks\n\n## Validation Checks:\n- Ensure all requirements are covered by design\n- Ensure all design elements are covered by tasks\n- Verify task dependencies and logical sequence\n- Check that requirement references are accurate\n- Maintain consistency across all three documents\n\nPlease format the modified document(s) and verify they integrate properly with the overall spec workflow. Ensure the formatting enables proper Kiro IDE features like task execution buttons and spec navigation."
  }
}